name: Deploy Super Mario Game to EKS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: self-hosted

    env:
      AWS_REGION: us-east-1
      ECR_REPOSITORY: supermario-game
      CLUSTER_NAME: super-mario-eks

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Debug directory structure
        run: |
          echo "Current working directory: $(pwd)"
          echo "Repository contents:"
          ls -la

      - name: Install AWS CLI
        run: |
          if ! command -v aws &> /dev/null; then
            echo "AWS CLI not found, installing..."
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -q awscliv2.zip
            sudo ./aws/install
            rm -rf aws awscliv2.zip
            echo "AWS CLI installed:"
            aws --version
          else
            echo "AWS CLI already installed:"
            aws --version
          fi

      - name: Configure AWS credentials
        run: |
          mkdir -p ~/.aws
          cat > ~/.aws/credentials << EOF
          [default]
          aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          EOF
          
          cat > ~/.aws/config << EOF
          [default]
          region=${{ env.AWS_REGION }}
          output=json
          EOF
          
          echo "AWS credentials configured"

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install dependencies
        run: |
          if [ -f "package.json" ]; then
            echo "Installing dependencies in $(pwd)"
            npm install
          else
            echo "WARNING: package.json not found in $(pwd)"
            ls -la
          fi

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Initialize Terraform
        run: |
          if [ -d "terraform-files" ]; then
            cd terraform-files
            echo "Initializing Terraform in $(pwd)"
            terraform init
          else
            echo "SEARCHING for terraform files..."
            TERRAFORM_DIR=$(find . -type d -name "terraform-files" | head -n 1)
            if [ -n "$TERRAFORM_DIR" ]; then
              cd "$TERRAFORM_DIR"
              echo "Found Terraform directory at $(pwd)"
              terraform init
            else
              echo "ERROR: terraform-files directory not found anywhere in the repository."
              exit 1
            fi
          fi

      - name: Check EKS cluster existence
        id: check-cluster
        run: |
          # Verify AWS CLI is working
          aws --version
          
          if aws eks describe-cluster --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
            echo "EKS cluster already exists"
            echo "cluster_exists=true" >> $GITHUB_OUTPUT
          else
            echo "EKS cluster doesn't exist"
            echo "cluster_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Apply Terraform (if needed)
        if: steps.check-cluster.outputs.cluster_exists == 'false'
        run: |
          if [ -d "terraform-files" ]; then
            cd terraform-files
          else
            TERRAFORM_DIR=$(find . -type d -name "terraform-files" | head -n 1)
            if [ -n "$TERRAFORM_DIR" ]; then
              cd "$TERRAFORM_DIR"
            else
              echo "ERROR: terraform-files directory not found."
              exit 1
            fi
          fi
          
          echo "Applying Terraform in $(pwd)"
          terraform apply -auto-approve

      - name: Install Docker (if needed)
        run: |
          if ! command -v docker &> /dev/null; then
            echo "Docker not found, installing..."
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo usermod -aG docker $USER
            echo "Docker installed:"
            docker --version
          else
            echo "Docker already installed:"
            docker --version
          fi

      - name: Check if ECR repository exists
        id: check-ecr
        run: |
          if aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
            echo "ECR repository exists"
          else
            echo "Creating ECR repository"
            aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }}
          fi

      - name: Log in to Amazon ECR
        id: ecr-login
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin $(aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} --query 'repositories[0].repositoryUri' --output text | cut -d'/' -f1)
          REGISTRY=$(aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} --query 'repositories[0].repositoryUri' --output text | cut -d'/' -f1)
          echo "registry=$REGISTRY" >> $GITHUB_OUTPUT

      - name: Build Docker image
        run: |
          if [ -d "docker" ]; then
            DOCKER_DIR="docker"
          else
            DOCKER_DIR=$(find . -type d -name "docker" | head -n 1)
          fi
          
          if [ -n "$DOCKER_DIR" ]; then
            cd "$DOCKER_DIR"
            echo "Building Docker image in $(pwd)"
            docker build -t ${{ env.ECR_REPOSITORY }} .
          else
            echo "ERROR: Docker directory not found."
            exit 1
          fi

      - name: Tag Docker image
        run: |
          REGISTRY=$(aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} --query 'repositories[0].repositoryUri' --output text | cut -d'/' -f1)
          docker tag ${{ env.ECR_REPOSITORY }}:latest $REGISTRY/${{ env.ECR_REPOSITORY }}:latest
          echo "Image tagged as $REGISTRY/${{ env.ECR_REPOSITORY }}:latest"

      - name: Push Docker image to ECR
        run: |
          REGISTRY=$(aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} --query 'repositories[0].repositoryUri' --output text)
          docker tag ${{ env.ECR_REPOSITORY }}:latest $REGISTRY:latest
          docker push $REGISTRY:latest
          echo "Image pushed to $REGISTRY:latest"

      - name: Install kubectl
        run: |
          if ! command -v kubectl &> /dev/null; then
            echo "kubectl not found, installing..."
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/
            echo "kubectl installed:"
            kubectl version --client
          else
            echo "kubectl already installed:"
            kubectl version --client
          fi

      - name: Update kubeconfig for cluster authentication
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

      - name: Apply Kubernetes deployment
        run: |
          if [ -d "k8s" ]; then
            K8S_DIR="k8s"
          else
            K8S_DIR=$(find . -type d -name "k8s" | head -n 1)
          fi
          
          if [ -n "$K8S_DIR" ]; then
            cd "$K8S_DIR"
            echo "Applying K8s configs in $(pwd)"
            kubectl apply -f k8s-deployment.yml
          else
            echo "ERROR: k8s directory not found."
            exit 1
          fi

      - name: Update container image
        run: |
          REGISTRY=$(aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} --query 'repositories[0].repositoryUri' --output text)
          kubectl set image deployment/supermario-game supermario-game=$REGISTRY:latest
          
      - name: Wait for deployment
        run: |
          kubectl rollout status deployment/supermario-game --timeout=180s
          
      - name: Get service information
        run: |
          echo "Deployment complete! Access your Super Mario game at:"
          kubectl get svc supermario-service -o jsonpath="{.status.loadBalancer.ingress[0].hostname}"