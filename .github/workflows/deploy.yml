name: Deploy Super Mario Game to EKS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: self-hosted

    env:
      AWS_REGION: us-east-1
      ECR_REPOSITORY: supermario-game
      CLUSTER_NAME: super-mario-eks

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Debug environment
        run: |
          echo "Current working directory: $(pwd)"
          echo "Repository contents:"
          ls -la
          echo "User: $(whoami)"
          echo "Home directory: $HOME"
          echo "Checking for AWS CLI: $(which aws || echo 'not found')"
          echo "Checking for Docker: $(which docker || echo 'not found')"
          echo "Checking for kubectl: $(which kubectl || echo 'not found')"

      - name: Configure AWS credentials
        run: |
          mkdir -p $HOME/.aws
          cat > $HOME/.aws/credentials << EOF
          [default]
          aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          EOF
          
          cat > $HOME/.aws/config << EOF
          [default]
          region=${{ env.AWS_REGION }}
          output=json
          EOF
          
          echo "AWS credentials configured"

      - name: Ensure AWS CLI is available
        run: |
          if ! command -v aws &> /dev/null; then
            echo "AWS CLI not found, installing to user directory..."
            mkdir -p $HOME/aws-cli
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -q awscliv2.zip
            ./aws/install --install-dir $HOME/aws-cli --bin-dir $HOME/bin
            echo "export PATH=$HOME/bin:$PATH" >> $HOME/.bashrc
            export PATH=$HOME/bin:$PATH
            rm -rf aws awscliv2.zip
            echo "AWS CLI installed successfully."
          else
            echo "AWS CLI already installed: $(aws --version)"
          fi

      - name: Ensure kubectl is available
        run: |
          if ! command -v kubectl &> /dev/null; then
            echo "kubectl not found, installing to user directory..."
            mkdir -p $HOME/bin
            curl -LO "https://dl.k8s.io/release/v1.25.0/bin/linux/amd64/kubectl"
            chmod +x kubectl
            mv kubectl $HOME/bin/
            export PATH=$HOME/bin:$PATH
            echo "kubectl installed to $HOME/bin:"
            $HOME/bin/kubectl version --client
          else
            echo "kubectl already installed:"
            kubectl version --client
          fi

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install dependencies
        run: |
          if [ -f "package.json" ]; then
            echo "Installing dependencies in $(pwd)"
            npm install
          else
            echo "WARNING: package.json not found in $(pwd)"
            ls -la
          fi

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Initialize Terraform
        run: |
          if [ -d "terraform-files" ]; then
            cd terraform-files
            echo "Initializing Terraform in $(pwd)"
            terraform init
          else
            echo "SEARCHING for terraform files..."
            TERRAFORM_DIR=$(find . -type d -name "terraform-files" | head -n 1)
            if [ -n "$TERRAFORM_DIR" ]; then
              cd "$TERRAFORM_DIR"
              echo "Found Terraform directory at $(pwd)"
              terraform init
            else
              echo "ERROR: terraform-files directory not found anywhere in the repository."
              exit 1
            fi
          fi

      - name: Check EKS cluster existence
        id: check-cluster
        run: |
          if aws eks describe-cluster --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
            echo "EKS cluster already exists"
            echo "cluster_exists=true" >> $GITHUB_OUTPUT
          else
            echo "EKS cluster doesn't exist"
            echo "cluster_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Apply Terraform (if needed)
        if: steps.check-cluster.outputs.cluster_exists == 'false'
        run: |
          if [ -d "terraform-files" ]; then
            cd terraform-files
          else
            TERRAFORM_DIR=$(find . -type d -name "terraform-files" | head -n 1)
            if [ -n "$TERRAFORM_DIR" ]; then
              cd "$TERRAFORM_DIR"
            else
              echo "ERROR: terraform-files directory not found."
              exit 1
            fi
          fi
          
          echo "Applying Terraform in $(pwd)"
          terraform apply -auto-approve

      - name: Check if Docker is available
        id: check-docker
        run: |
          if command -v docker &> /dev/null; then
            echo "Docker is available"
            echo "docker_available=true" >> $GITHUB_OUTPUT
          else
            echo "WARNING: Docker is not available on this runner"
            echo "docker_available=false" >> $GITHUB_OUTPUT
          fi

      - name: Check if ECR repository exists
        id: check-ecr
        run: |
          if aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
            echo "ECR repository exists"
            echo "ECR_URI=$(aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} --query 'repositories[0].repositoryUri' --output text)" >> $GITHUB_OUTPUT
          else
            echo "Creating ECR repository"
            ECR_URI=$(aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }} --query 'repository.repositoryUri' --output text)
            echo "Created ECR repository: $ECR_URI"
            echo "ECR_URI=$ECR_URI" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Docker image
        if: steps.check-docker.outputs.docker_available == 'true'
        run: |
          # Get ECR login token
          echo "Logging in to ECR..."
          ECR_PASSWORD=$(aws ecr get-login-password --region ${{ env.AWS_REGION }})
          ECR_REGISTRY=$(echo "${{ steps.check-ecr.outputs.ECR_URI }}" | cut -d'/' -f1)
          echo "$ECR_PASSWORD" | docker login --username AWS --password-stdin "$ECR_REGISTRY"
          
          # Find Docker directory
          if [ -d "docker" ]; then
            DOCKER_DIR="docker"
          else
            DOCKER_DIR=$(find . -type d -name "docker" | head -n 1)
          fi
          
          if [ -n "$DOCKER_DIR" ]; then
            cd "$DOCKER_DIR"
            echo "Building Docker image in $(pwd)"
            docker build -t ${{ env.ECR_REPOSITORY }}:latest .
            docker tag ${{ env.ECR_REPOSITORY }}:latest ${{ steps.check-ecr.outputs.ECR_URI }}:latest
            echo "Pushing image to ECR..."
            docker push ${{ steps.check-ecr.outputs.ECR_URI }}:latest
          else
            echo "ERROR: Docker directory not found."
            exit 1
          fi

      - name: Update kubeconfig for cluster authentication
        run: |
          echo "Updating kubeconfig..."
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

      - name: Apply Kubernetes deployment
        run: |
          if [ -d "k8s" ]; then
            K8S_DIR="k8s"
          else
            K8S_DIR=$(find . -type d -name "k8s" | head -n 1)
          fi
          
          if [ -n "$K8S_DIR" ]; then
            cd "$K8S_DIR"
            echo "Applying K8s configs in $(pwd)"
            kubectl apply -f k8s-deployment.yml
            
            # Update the image if Docker was available
            if [ "${{ steps.check-docker.outputs.docker_available }}" == "true" ]; then
              echo "Updating container image..."
              kubectl set image deployment/supermario-game supermario-game=${{ steps.check-ecr.outputs.ECR_URI }}:latest
              
              echo "Waiting for deployment to complete..."
              kubectl rollout status deployment/supermario-game --timeout=180s
            fi
            
            echo "Deployment complete! Access your Super Mario game at:"
            kubectl get svc supermario-service -o jsonpath="{.status.loadBalancer.ingress[0].hostname}"
          else
            echo "ERROR: k8s directory not found."
            exit 1
          fi