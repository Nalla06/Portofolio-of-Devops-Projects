name: Deploy Super Mario Game to EKS

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      confirm_destroy:
        description: "Type 'yes' to confirm Terraform destroy"
        required: true

jobs:
  deploy:
    runs-on: self-hosted

    env:
      AWS_REGION: us-east-1
      ECR_REPOSITORY: supermario-game
      ECR_URI: 123456789012.dkr.ecr.us-east-1.amazonaws.com/supermario-game
      CLUSTER_NAME: super-mario-eks
      TERRAFORM_DIR: /home/nalla/Portofolio-of-Devops-Projects/Project-10_Supermario_game_deployment_AWS_EKS/terraform-files

    steps:
      - name: Install AWS CLI
        run: |
          echo "Downloading AWS CLI..."
          rm -f awscliv2.zip
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          if [ $? -ne 0 ]; then
            echo "Error: Failed to download AWS CLI"
            exit 1
          fi

          echo "Unzipping AWS CLI..."
          unzip -o awscliv2.zip
          if [ $? -ne 0 ]; then
            echo "Error: Failed to unzip AWS CLI"
            exit 1
          fi

          echo "Installing AWS CLI..."
          sudo ./aws/install
          if [ $? -ne 0 ]; then
            echo "Error: Failed to install AWS CLI"
            exit 1
          fi
          echo "AWS CLI installed successfully"
          export PATH=$PATH:/home/nalla/aws-cli/v2/2.24.7/dist
          echo "PATH is now: $PATH"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: "1.0.0"

      - name: Verify Terraform directory
        run: |
          echo "Checking Terraform directory..."
          if [ ! -d "${{ env.TERRAFORM_DIR }}" ]; then
            echo "Error: Terraform directory not found at ${{ env.TERRAFORM_DIR }}"
            exit 1
          fi
          echo "Found Terraform directory. Contents:"
          ls -la ${{ env.TERRAFORM_DIR }}

      - name: Initialize Terraform
        run: |
          cd ${{ env.TERRAFORM_DIR }}
          echo "Initializing Terraform in $(pwd)"
          terraform init

      - name: Destroy Terraform resources if requested
        if: ${{ github.event.inputs.confirm_destroy == 'yes' }}
        run: |
          cd ${{ env.TERRAFORM_DIR }}
          echo "Starting Terraform destroy..."
          terraform destroy -auto-approve

      - name: Apply Terraform if not destroying
        if: ${{ github.event.inputs.confirm_destroy != 'yes' }}
        run: |
          cd ${{ env.TERRAFORM_DIR }}
          echo "Starting Terraform apply..."
          terraform apply -auto-approve
          echo "Waiting for infrastructure to be ready..."
          sleep 30

      - name: Configure ECR and build/p â–‹