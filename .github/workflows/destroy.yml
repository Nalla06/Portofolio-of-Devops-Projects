name: Destroy Super Mario Game Infrastructure

on:
  workflow_dispatch:  # Only manual trigger

jobs:
  destroy:
    runs-on: self-hosted
    
    env:
      AWS_REGION: us-east-1
      CLUSTER_NAME: super-mario-eks

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        run: |
          mkdir -p $HOME/.aws
          cat > $HOME/.aws/credentials << EOF
          [default]
          aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          EOF
          
          cat > $HOME/.aws/config << EOF
          [default]
          region=${{ env.AWS_REGION }}
          output=json
          EOF
          
          echo "AWS credentials configured"

      - name: Ensure AWS CLI is available
        run: |
          export PATH=$HOME/aws-cli/v2/2.24.7/dist:$PATH
          echo "export PATH=$HOME/aws-cli/v2/2.24.7/dist:$PATH" >> $HOME/.bashrc
          source $HOME/.bashrc
          echo "AWS CLI Version: $(aws --version)"

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Manual cleanup of problematic resources
        run: |
          echo "Starting manual cleanup of resources..."
          
          # Try to delete EKS cluster first
          echo "Checking for EKS cluster..."
          if aws eks describe-cluster --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
            echo "EKS cluster exists, deleting..."
            aws eks delete-cluster --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
            echo "Waiting for EKS cluster deletion to complete..."
            aws eks wait cluster-deleted --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
          else
            echo "EKS cluster doesn't exist or already deleted"
          fi
          
          # Clean up IAM roles
          echo "Cleaning up IAM roles..."
          if aws iam get-role --role-name eks-cluster-role >/dev/null 2>&1; then
            echo "Detaching policies from eks-cluster-role..."
            for policy in $(aws iam list-attached-role-policies --role-name eks-cluster-role --query 'AttachedPolicies[*].PolicyArn' --output text); do
              echo "Detaching policy $policy from eks-cluster-role"
              aws iam detach-role-policy --role-name eks-cluster-role --policy-arn $policy
            done
            echo "Deleting role eks-cluster-role..."
            aws iam delete-role --role-name eks-cluster-role
          fi
          
          # Clean up VPCs that might be causing limit issues
          echo "Checking for EKS-related VPCs..."
          for vpc in $(aws ec2 describe-vpcs --query 'Vpcs[?Tags[?Key==`kubernetes.io/cluster/super-mario-eks`]].VpcId' --output text); do
            echo "Found EKS-related VPC: $vpc, attempting cleanup..."
            
            # Delete all associated subnets
            for subnet in $(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$vpc" --query 'Subnets[*].SubnetId' --output text); do
              echo "Deleting subnet $subnet"
              aws ec2 delete-subnet --subnet-id $subnet
            done
            
            # Delete all associated security groups (except default)
            for sg in $(aws ec2 describe-security-groups --filters "Name=vpc-id,Values=$vpc" --query 'SecurityGroups[?GroupName!=`default`].GroupId' --output text); do
              echo "Deleting security group $sg"
              aws ec2 delete-security-group --group-id $sg
            done
            
            # Delete associated internet gateways
            for igw in $(aws ec2 describe-internet-gateways --filters "Name=attachment.vpc-id,Values=$vpc" --query 'InternetGateways[*].InternetGatewayId' --output text); do
              echo "Detaching and deleting internet gateway $igw"
              aws ec2 detach-internet-gateway --internet-gateway-id $igw --vpc-id $vpc
              aws ec2 delete-internet-gateway --internet-gateway-id $igw
            done
            
            # Delete route tables (except main)
            for rt in $(aws ec2 describe-route-tables --filters "Name=vpc-id,Values=$vpc" --query 'RouteTables[?Associations[?Main!=`true`]].RouteTableId' --output text); do
              echo "Deleting route table $rt"
              # First delete non-propagated routes
              for route in $(aws ec2 describe-route-tables --route-table-id $rt --query 'RouteTables[0].Routes[?Origin==`CreateRoute`].DestinationCidrBlock' --output text); do
                echo "Deleting route $route from $rt"
                aws ec2 delete-route --route-table-id $rt --destination-cidr-block $route
              done
              # Then delete the table
              aws ec2 delete-route-table --route-table-id $rt
            done
            
            # Finally try to delete the VPC
            echo "Attempting to delete VPC $vpc"
            aws ec2 delete-vpc --vpc-id $vpc
          done
          
          # Look for any EKS-named VPCs as well
          for vpc in $(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=eks-vpc" --query 'Vpcs[*].VpcId' --output text); do
            echo "Found EKS-named VPC: $vpc, attempting cleanup..."
            
            # (Same subnet, security group, IGW, and route table cleanup as above)
            # Delete all associated subnets
            for subnet in $(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$vpc" --query 'Subnets[*].SubnetId' --output text); do
              echo "Deleting subnet $subnet"
              aws ec2 delete-subnet --subnet-id $subnet
            done
            
            # Delete all associated security groups (except default)
            for sg in $(aws ec2 describe-security-groups --filters "Name=vpc-id,Values=$vpc" --query 'SecurityGroups[?GroupName!=`default`].GroupId' --output text); do
              echo "Deleting security group $sg"
              aws ec2 delete-security-group --group-id $sg
            done
            
            # Delete associated internet gateways
            for igw in $(aws ec2 describe-internet-gateways --filters "Name=attachment.vpc-id,Values=$vpc" --query 'InternetGateways[*].InternetGatewayId' --output text); do
              echo "Detaching and deleting internet gateway $igw"
              aws ec2 detach-internet-gateway --internet-gateway-id $igw --vpc-id $vpc
              aws ec2 delete-internet-gateway --internet-gateway-id $igw
            done
            
            # Delete route tables (except main)
            for rt in $(aws ec2 describe-route-tables --filters "Name=vpc-id,Values=$vpc" --query 'RouteTables[?Associations[?Main!=`true`]].RouteTableId' --output text); do
              echo "Deleting route table $rt"
              # First delete non-propagated routes
              for route in $(aws ec2 describe-route-tables --route-table-id $rt --query 'RouteTables[0].Routes[?Origin==`CreateRoute`].DestinationCidrBlock' --output text); do
                echo "Deleting route $route from $rt"
                aws ec2 delete-route --route-table-id $rt --destination-cidr-block $route
              done
              # Then delete the table
              aws ec2 delete-route-table --route-table-id $rt
            done
            
            # Finally try to delete the VPC
            echo "Attempting to delete VPC $vpc"
            aws ec2 delete-vpc --vpc-id $vpc
          done
          
          echo "Manual cleanup completed"

      - name: Initialize Terraform
        run: |
          if [ -d "terraform-files" ]; then
            cd terraform-files
            echo "Initializing Terraform in $(pwd)"
            terraform init
          else
            echo "SEARCHING for terraform files..."
            TERRAFORM_DIR=$(find . -type d -name "terraform-files" | head -n 1)
            if [ -n "$TERRAFORM_DIR" ]; then
              cd "$TERRAFORM_DIR"
              echo "Found Terraform directory at $(pwd)"
              terraform init
            else
              echo "ERROR: terraform-files directory not found anywhere in the repository."
              exit 1
            fi
          fi

      - name: Destroy Terraform resources
        run: |
          if [ -d "terraform-files" ]; then
            cd terraform-files
          else
            TERRAFORM_DIR=$(find . -type d -name "terraform-files" | head -n 1)
            if [ -n "$TERRAFORM_DIR" ]; then
              cd "$TERRAFORM_DIR"
            else
              echo "ERROR: terraform-files directory not found."
              exit 1
            fi
          fi
          
          echo "Destroying Terraform resources in $(pwd)"
          # Add -force flag to bypass confirmation prompts
          terraform destroy -auto-approve
          
          echo "Terraform destroy completed"