name: Destroy Super Mario Game Infrastructure

on:
  workflow_dispatch:  # Only manual trigger

jobs:
  destroy:
    runs-on: self-hosted
    
    env:
      AWS_REGION: us-east-1
      CLUSTER_NAME: super-mario-eks

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        run: |
          mkdir -p $HOME/.aws
          cat > $HOME/.aws/credentials << EOF
          [default]
          aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          EOF
          
          cat > $HOME/.aws/config << EOF
          [default]
          region=${{ env.AWS_REGION }}
          output=json
          EOF
          
          echo "AWS credentials configured"

      - name: Ensure AWS CLI is available
        run: |
          export PATH=$HOME/aws-cli/v2/2.24.7/dist:$PATH
          echo "export PATH=$HOME/aws-cli/v2/2.24.7/dist:$PATH" >> $HOME/.bashrc
          source $HOME/.bashrc
          echo "AWS CLI Version: $(aws --version)"

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Manual cleanup of problematic resources
        run: |
          echo "Starting manual cleanup of resources..."
          
          # Try to delete EKS cluster first
          echo "Checking for EKS cluster..."
          if aws eks describe-cluster --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
            echo "EKS cluster exists, deleting..."
            aws eks delete-cluster --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
            echo "Waiting for EKS cluster deletion to complete..."
            aws eks wait cluster-deleted --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
          else
            echo "EKS cluster doesn't exist or already deleted"
          fi
          
          # Continue cleaning up IAM roles, VPCs, and other resources as per your script...
          
          echo "Manual cleanup completed"

      - name: Initialize Terraform
        run: |
          if [ -d "terraform-files" ]; then
            cd terraform-files
            echo "Initializing Terraform in $(pwd)"
            terraform init
          else
            echo "SEARCHING for terraform files..."
            TERRAFORM_DIR=$(find . -type d -name "terraform-files" | head -n 1)
            if [ -n "$TERRAFORM_DIR" ]; then
              cd "$TERRAFORM_DIR"
              echo "Found Terraform directory at $(pwd)"
              terraform init
            else
              echo "ERROR: terraform-files directory not found anywhere in the repository."
              exit 1
            fi
          fi

      - name: Destroy Terraform resources
        run: |
          echo "Checking if terraform-files directory exists for destruction..."
          if [ -d "terraform-files" ]; then
            cd terraform-files
          else
            TERRAFORM_DIR=$(find . -type d -name "terraform-files" | head -n 1)
            if [ -n "$TERRAFORM_DIR" ]; then
              cd "$TERRAFORM_DIR"
            else
              echo "ERROR: terraform-files directory not found."
              exit 1
            fi
          fi
          
          echo "Destroying Terraform resources in $(pwd)"
          terraform destroy -auto-approve
          
          echo "Terraform destroy completed"
