pipeline {
    agent any

    environment {
        // Define variables for the Docker image and repository paths
        DOCKER_IMAGE_NAME = 'nalla06/tomcatserver' // Docker Hub image name
        DOCKER_IMAGE_TAG = 'latest' // Image tag (latest)
        GITHUB_REPO_URL = 'https://github.com/Nalla06/Portofolio-of-Devops-Projects.git'
        GITHUB_BRANCH = 'main'
        ARTIFACTS_DIR = 'target'  // Directory for storing build artifacts
        ARTIFACTS_PATH = 'Project-04_Dockerized_Jenkins_AWS/hello-world/target/*.jar'  // Path to JAR file
    }

    stages {
        stage('Clone Repository') {
            steps {
                echo 'Cloning GitHub repository...'
                // Clone the repository
                git url: "${GITHUB_REPO_URL}", branch: "${GITHUB_BRANCH}"
            }
        }

        stage('Build Artifacts') {
            steps {
                echo 'Building artifacts...'
                script {
                    // Navigate to the directory containing the Maven project
                    dir('Project-04_Dockerized_Jenkins_AWS/hello-world') {
                        // Run Maven build to generate artifacts (JAR file)
                        sh 'mvn clean install'
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image with the artifact...'
                script {
                    // Build the Docker image and include the generated artifact
                    // Make sure your Dockerfile is set to COPY the WAR/JAR file into the container
                    sh 'docker build -t ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} .'
                }
            }
        }

        stage('Push Docker Image to Docker Hub') {
            steps {
                echo 'Pushing Docker image to Docker Hub...'
                script {
                    // Login to Docker Hub and push the image
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USER --password-stdin'
                        sh 'docker push ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}'
                    }
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                echo 'Running Docker container...'
                script {
                    // Run the Docker container using the pushed image
                    sh 'docker run -d -p 8085:8085 ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}'
                }
            }
        }

        stage('Deploy Application') {
            steps {
                echo 'Deploying application...'
                script {
                    // Example deploy step (You can customize this to deploy the application to an environment)
                    echo 'Deploying to the environment...'
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
