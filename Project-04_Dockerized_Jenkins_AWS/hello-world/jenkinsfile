pipeline {
    agent any

    environment {
        // Set environment variables for your EC2 instance
        EC2_HOST = "ec2-user@204.236.210.50" // Replace with your EC2 instance IP
        DOCKER_REGISTRY = "nalla06" // Replace with your DockerHub username (if using)
        DOCKER_IMAGE = "tomcatserverr" // Replace with your image name (or adjust based on your naming)
        MAVEN_HOME = "/usr/share/maven" // Path to Maven if it's not automatically detected
        REPO_URL = "https://github.com/Nalla06/Portofolio-of-Devops-Projects.git"
        BRANCH = "main" // Set your branch name if it's different
    }

    stages {
        stage('Clone Repository') {
            steps {
                echo 'Cloning GitHub repository...'
                // Clone the repository
                git url: "$REPO_URL", branch: "$BRANCH"
            }
        }

        stage('Build WAR') {
            steps {
                script {
                    // Run Maven to build the WAR file
                    sh 'cd Project-04_Dockerized_Jenkins_AWS && mvn clean package'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build Docker image from the Dockerfile
                    sh 'cd Project-04_Dockerized_Jenkins_AWS && docker build -t $DOCKER_REGISTRY/$DOCKER_IMAGE:latest .'
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    // Login to Docker Hub and push the Docker image
                    withCredentials([string(credentialsId: 'DOCKER_PASSWORD', variable: 'DOCKER_PASSWORD')]) {
                        // Logout from Docker in case of expired or previous session
                        sh 'docker logout'
                        
                        // Login to Docker Hub
                        sh 'docker login -u $DOCKER_REGISTRY -p $DOCKER_PASSWORD'
                        
                        // Push the Docker image to Docker Hub
                        sh 'docker push $DOCKER_REGISTRY/$DOCKER_IMAGE:latest'
                    }
                }
            }
        }

        stage('Deploy to EC2') {
            steps {
                script {
                    // Deploy the Docker image to EC2
                    withCredentials([sshUserPrivateKey(credentialsId: 'linux-key-pair', keyFileVariable: 'EC2_SSH_KEY_PATH')]) {
                        sh """
                            echo \$EC2_SSH_KEY_PATH
                            ssh -o StrictHostKeyChecking=no -i \$EC2_SSH_KEY_PATH ec2-user@204.236.210.50 'docker pull $DOCKER_REGISTRY/$DOCKER_IMAGE:latest && docker run -d -p 8080:8080 $DOCKER_REGISTRY/$DOCKER_IMAGE:latest'
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            // Clean up Docker images to free up space
            sh 'docker system prune -f'
        }
    }
}
